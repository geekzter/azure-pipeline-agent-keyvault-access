parameters:
- name: useVariableGroup
  displayName: Use variable group
  type: boolean
  default: ${use_variable_group}
- name: runAsPreJob
  displayName: Run pre-job task
  type: boolean
  default: false
- name: startAgents
  displayName: Start agents
  type: boolean
  default: ${start_agents}
- name: agentLessJob
  displayName: Run agentless job
  type: boolean
  default: false
  
trigger: none
schedules:
- cron: '0 12 * * Fri'
  displayName: 'Weekly build (UTC)'
  always: 'true'
  branches:
    include:
    - main

jobs:
- $${{ if parameters.startAgents }}:
  - job: startAgent
    displayName: 'Start Agent'
    pool:
      name: 'Azure Pipelines'
      vmImage: ubuntu-latest
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Start agents in resource group'
      inputs:
        azureSubscription: '$(serviceConnectionName)'
        action: 'Start'
        resourceGroupName: '$(resourceGroupName)'

- job: agent
  $${{ if parameters.startAgents }}:
    dependsOn: startAgent
  displayName: 'Agent job'
  pool:
    name: $(poolName)
  variables:
  - name: foo
    value: 'bar'
  - $${{ if parameters.useVariableGroup }}: # escape the $ sign for templatefile()
    - group: '${key_vault_name}'

  steps:
  - task: AzureCLI@2
    displayName: 'AzureCLI@2: Display Service Connection Info'
    inputs:
      azureSubscription: '$(serviceConnectionName)'
      failOnStandardError: true
      inlineScript: |
        Write-Host "Service Connection name: '$(serviceConnectionName)'"

        az account show --query "user.name" -o tsv | Set-Variable appId
        az account show -o json | Out-File -FilePath azureAccount.json
        Get-Content azureAccount.json

        Write-Host "`nRole assignments for the identity:"
        az role assignment list --all --assignee $appId -o json | Out-File -FilePath roleAssignments.json
        Get-Content roleAssignments.json | ConvertFrom-Json `
                                         | Select-Object -Property roleDefinitionName, scope `
                                         | Sort-Object -Property roleDefinitionName
                                         | Format-Table -AutoSize -Wrap

        Write-Host "`nService Principal object of the identity:"
        az ad sp show --id $appId -o json | Out-File -FilePath servicePrincipal.json
        Get-Content servicePrincipal.json

        Write-Host "`nSubscriptions the identity has access to:"
        az account list --query "sort_by([].{Name:name, SubscriptionId:id}, &Name)" -o table
        
        Write-Host "`nResource groups that identity has access to in subscription '$(az account show --query name -o tsv)':"
        az group list --query "sort_by([].{Name:name, ResourceId:id}, &Name)" -o table
      scriptLocation: inlineScript
      scriptType: pscore
      workingDirectory: '$(Build.ArtifactStagingDirectory)'

  - task: AzureCLI@2
    displayName: 'AzureCLI@2: Access Key Vault'
    inputs:
      azureSubscription: '$(serviceConnectionName)'
      failOnStandardError: true
      inlineScript: |
        $keyVaultId = "$(keyVaultId)"
        $keyVaultIdElements = $keyVaultId.Split('/')
        $keyVaultName = $keyVaultIdElements[8]
        $resourceGroupName = $keyVaultIdElements[4]
        $subscriptionId = $keyVaultIdElements[2]

        Write-Host "`nTesting ARM control plane access to Key Vault '$keyVaultName' in resource group '$resourceGroupName' (subscription '$subscriptionId')"
        az keyvault show -n $keyVaultName -g $resourceGroupName --subscription $subscriptionId -o table

        Write-Host "`nTesting data plane access to Key Vault '$keyVaultName' in resource group '$resourceGroupName' (subscription '$subscriptionId')"
        az keyvault secret list --vault-name $keyVaultName --subscription $subscriptionId -o table
      scriptLocation: inlineScript
      scriptType: pscore
      workingDirectory: '$(Build.ArtifactStagingDirectory)'

  - task: AzureKeyVault@2
    displayName: 'AzureKeyVault@2: Access Key Vault (runAsPreJob: $${{ parameters.runAsPreJob }})'
    inputs:
      azureSubscription: '$(serviceConnectionName)'
      keyVaultName: $(keyVaultName)
      secretsFilter: '*'
      runAsPreJob: $${{ parameters.runAsPreJob }}

  - publish: $(Build.ArtifactStagingDirectory)
    displayName: 'Publish json files'
    artifact: indentityInfo

- $${{ if parameters.agentLessJob }}:
  - job: agentLess
    displayName: 'Agentless job'
    pool: server
    variables:
    - name: foo
      value: 'bar'
    - $${{ if parameters.useVariableGroup }}: # escape the $ sign for templatefile()
      - group: '${key_vault_name}'
    steps:
    - task: Delay@1
      displayName: 'Surrogate delay (0 minutes)'
      inputs:
        delayForMinutes: 0